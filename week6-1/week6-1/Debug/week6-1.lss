
week6-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000841  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a6  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026b  00000000  00000000  00001213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	42 c0       	rjmp	.+132    	; 0xae <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2a d0       	rcall	.+84     	; 0xfe <main>
  aa:	39 c0       	rjmp	.+114    	; 0x11e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_10>:
#include <avr/interrupt.h>
// Normal Mode
unsigned char led = 0x00 ;
unsigned int count = 0;

ISR(TIMER2_OVF_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	count ++;
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (count == 60) {
  ce:	cc 97       	sbiw	r24, 0x3c	; 60
  d0:	79 f4       	brne	.+30     	; 0xf0 <__vector_10+0x42>
		if(led==0b10000000) {
  d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led>
  d6:	80 38       	cpi	r24, 0x80	; 128
  d8:	21 f4       	brne	.+8      	; 0xe2 <__vector_10+0x34>
			led=0b00000001;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led>
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <__vector_10+0x3a>
		}
		else {
			led = led << 1;
  e2:	88 0f       	add	r24, r24
  e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led>
		}
		count = 0;
  e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:

int main(){
	DDRA = 0xff ;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a bb       	out	0x1a, r24	; 26
	TCCR2 = 0b00000101 ; //프리스케일러 분주비 1024
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	85 bd       	out	0x25, r24	; 37
	TIMSK = 0b01000000 ; //오버플로우 인터럽트 허용
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0 ; //타이머카운터0 초기화
 10a:	14 bc       	out	0x24, r1	; 36
	SREG = 0x80 ; //전체 인터럽트 허가
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	8f bf       	out	0x3f, r24	; 63
	led=0b00000001;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led>
	while(1){
		PORTA=led;
 116:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led>
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	fc cf       	rjmp	.-8      	; 0x116 <main+0x18>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
