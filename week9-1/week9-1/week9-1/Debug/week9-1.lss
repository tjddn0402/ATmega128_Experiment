
week9-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000014a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084b  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ad  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025b  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e4       	ldi	r30, 0x4A	; 74
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	31 d0       	rcall	.+98     	; 0x126 <main>
  c4:	40 c0       	rjmp	.+128    	; 0x146 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_9>:
#include <avr/interrupt.h>

// CTC Mode
volatile unsigned char led = 0x0f; // 초기 led
volatile unsigned int count = 0;
ISR(TIMER2_COMP_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	count++; // 인터럽트 횟수 카운트
  de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if(count == 125){ // 125번째 인터럽트시 (1초)
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  f8:	8d 37       	cpi	r24, 0x7D	; 125
  fa:	91 05       	cpc	r25, r1
  fc:	49 f4       	brne	.+18     	; 0x110 <__vector_9+0x48>
		PORTF = (~PORTF);// 반전 출력
  fe:	e2 e6       	ldi	r30, 0x62	; 98
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 95       	com	r24
 106:	80 83       	st	Z, r24
		count = 0; // 카운트 초기화
 108:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 10c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0b be       	out	0x3b, r0	; 59
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <main>:
int main(){
	DDRF = 0xff; // LED 포트를 출력으로 설정
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	TCCR2 = 0b00001101; // CTC모드, 프리스케일러 분주비 1024
 12c:	8d e0       	ldi	r24, 0x0D	; 13
 12e:	85 bd       	out	0x25, r24	; 37
	TIMSK = 0b10000000; // 타이머2의 비교일치 인터럽트 설정
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	87 bf       	out	0x37, r24	; 55
	OCR2 = 124; // 비교일치 값 지정
 134:	9c e7       	ldi	r25, 0x7C	; 124
 136:	93 bd       	out	0x23, r25	; 35
	TCNT2 = 0; // 초기값
 138:	14 bc       	out	0x24, r1	; 36
	SREG = 0x80; // 전역 인터럽트 허용
 13a:	8f bf       	out	0x3f, r24	; 63
	PORTF = led;
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 140:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x1e>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
