
week11-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000973  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085f  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000387  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046e  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000119  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__vector_1>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__vector_2>
   a:	00 00       	nop
   c:	7b c0       	rjmp	.+246    	; 0x104 <__vector_3>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	52 d0       	rcall	.+164    	; 0x158 <main>
  b4:	6a c0       	rjmp	.+212    	; 0x18a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <__vector_1>:

volatile unsigned char dir=1;
volatile unsigned char period=2;
unsigned char mode = 0b1011;

ISR(INT0_vect){//속도 증가 == 주기 감소
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
	if(period!=1){period--;}
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	29 f0       	breq	.+10     	; 0xd6 <__vector_1+0x1e>
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_2>:
ISR(INT1_vect){//속도 감소
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
	period++;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_3>:
ISR(INT2_vect){//회전방향 변화
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	if(dir==1){dir=0;}
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	19 f4       	brne	.+6      	; 0x11e <__vector_3+0x1a>
 118:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dir>
 11c:	03 c0       	rjmp	.+6      	; 0x124 <__vector_3+0x20>
	else{dir=1;}
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
}
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <extern_interrupt>:

void extern_interrupt(){
	EICRA=0b00101010;//falling edge
 130:	8a e2       	ldi	r24, 0x2A	; 42
 132:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK=0b00000111;
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	89 bf       	out	0x39, r24	; 57
 13a:	08 95       	ret

0000013c <delay>:
}

void delay(){
	unsigned char i;
	for(i=0;i<period;i++){
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	07 c0       	rjmp	.+14     	; 0x14e <delay+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	ef e9       	ldi	r30, 0x9F	; 159
 142:	ff e0       	ldi	r31, 0x0F	; 15
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <delay+0x8>
 148:	00 c0       	rjmp	.+0      	; 0x14a <delay+0xe>
 14a:	00 00       	nop
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	89 17       	cp	r24, r25
 154:	a8 f3       	brcs	.-22     	; 0x140 <delay+0x4>
		_delay_ms(1);
	}
}
 156:	08 95       	ret

00000158 <main>:

int main(void)
{
	DDRD=0x00;//입력(외부인터럽트)
 158:	11 ba       	out	0x11, r1	; 17
	DDRE=0xff;//출력
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	82 b9       	out	0x02, r24	; 2
	PORTD=0xff;
 15e:	82 bb       	out	0x12, r24	; 18
	PORTE=0x33;
 160:	83 e3       	ldi	r24, 0x33	; 51
 162:	83 b9       	out	0x03, r24	; 3
	
	extern_interrupt();
 164:	e5 df       	rcall	.-54     	; 0x130 <extern_interrupt>
	
    while (1) 
    {
		if(dir==1){
 166:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	39 f4       	brne	.+14     	; 0x17c <main+0x24>
			PORTE = 0b10110000;
 16e:	80 eb       	ldi	r24, 0xB0	; 176
			delay();
 170:	83 b9       	out	0x03, r24	; 3
 172:	e4 df       	rcall	.-56     	; 0x13c <delay>
			PORTE = 0b10110101;
 174:	85 eb       	ldi	r24, 0xB5	; 181
			delay();
 176:	83 b9       	out	0x03, r24	; 3
 178:	e1 df       	rcall	.-62     	; 0x13c <delay>
		}
		else{
			PORTE = 0b10111010;
 17a:	f5 cf       	rjmp	.-22     	; 0x166 <main+0xe>
 17c:	8a eb       	ldi	r24, 0xBA	; 186
			delay();
 17e:	83 b9       	out	0x03, r24	; 3
			PORTE = 0b10111111;
 180:	dd df       	rcall	.-70     	; 0x13c <delay>
 182:	8f eb       	ldi	r24, 0xBF	; 191
			delay();
 184:	83 b9       	out	0x03, r24	; 3
 186:	da df       	rcall	.-76     	; 0x13c <delay>
 188:	ee cf       	rjmp	.-36     	; 0x166 <main+0xe>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
