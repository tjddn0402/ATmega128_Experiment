
week4-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b9c  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c2  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000377  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044c  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000328  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	51 d0       	rcall	.+162    	; 0x156 <main>
  b4:	6c c0       	rjmp	.+216    	; 0x18e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <cmd>:
#include <avr/io.h>
#include <util/delay.h>

void cmd(int command)
{
	PORTA = 0b00000000;//Enable=0
  b8:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	ef e8       	ldi	r30, 0x8F	; 143
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <cmd+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <cmd+0xc>
  c4:	00 00       	nop
	_delay_ms(1);
	PORTA = 0b00000100;//Enable=1
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	9b bb       	out	0x1b, r25	; 27
  ca:	ef e8       	ldi	r30, 0x8F	; 143
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <cmd+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <cmd+0x1c>
  d4:	00 00       	nop
	_delay_ms(1);
	PORTB = command;
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	8f e8       	ldi	r24, 0x8F	; 143
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <cmd+0x24>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <cmd+0x2a>
  e2:	00 00       	nop
	_delay_ms(1);
	PORTA = 0b00000000;
  e4:	1b ba       	out	0x1b, r1	; 27
  e6:	ef e8       	ldi	r30, 0x8F	; 143
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <cmd+0x32>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <cmd+0x38>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <data>:
	_delay_ms(1);
}

void data(char str)
{
	PORTA = 0b00000101;
  f4:	95 e0       	ldi	r25, 0x05	; 5
  f6:	9b bb       	out	0x1b, r25	; 27
  f8:	ef e8       	ldi	r30, 0x8F	; 143
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <data+0x8>
 100:	00 c0       	rjmp	.+0      	; 0x102 <data+0xe>
 102:	00 00       	nop
	_delay_ms(1);
	PORTB = str;
 104:	88 bb       	out	0x18, r24	; 24
 106:	8f e8       	ldi	r24, 0x8F	; 143
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <data+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <data+0x1c>
 110:	00 00       	nop
	_delay_ms(1);
	PORTA = 0b00000001;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	8b bb       	out	0x1b, r24	; 27
 116:	ef e8       	ldi	r30, 0x8F	; 143
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <data+0x26>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <data+0x2c>
 120:	00 00       	nop
 122:	08 95       	ret

00000124 <display1>:
	_delay_ms(1);
}

void display1(volatile char *str)
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	8c 01       	movw	r16, r24
	cmd(0b10000000);//
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	c2 df       	rcall	.-124    	; 0xb8 <cmd>
	int i = 0;
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i] != '\0')
 138:	03 c0       	rjmp	.+6      	; 0x140 <display1+0x1c>
	{
		data(str[i]);
 13a:	80 81       	ld	r24, Z
 13c:	db df       	rcall	.-74     	; 0xf4 <data>
		i++;
 13e:	21 96       	adiw	r28, 0x01	; 1

void display1(volatile char *str)
{
	cmd(0b10000000);//
	int i = 0;
	while (str[i] != '\0')
 140:	f8 01       	movw	r30, r16
 142:	ec 0f       	add	r30, r28
 144:	fd 1f       	adc	r31, r29
 146:	80 81       	ld	r24, Z
 148:	81 11       	cpse	r24, r1
 14a:	f7 cf       	rjmp	.-18     	; 0x13a <display1+0x16>
	{
		data(str[i]);
		i++;
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <main>:

volatile char name[1][16] = {{"Kim Seongwoo"}}; // Initial LCD display

int main()
{
	DDRA = 0b11111111;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
 15a:	87 bb       	out	0x17, r24	; 23
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xa>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x10>
 166:	00 00       	nop

	_delay_ms(50);
	cmd(0b00111000); // Function Set. Set 8bit 2Line 5x7 dots
 168:	88 e3       	ldi	r24, 0x38	; 56
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	a5 df       	rcall	.-182    	; 0xb8 <cmd>
	cmd(0b00000001); // Display clear.
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	a2 df       	rcall	.-188    	; 0xb8 <cmd>
	cmd(0b10000000); // Set DDRAM address or cursor position on display
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9f df       	rcall	.-194    	; 0xb8 <cmd>
	cmd(0b00001100); // Display on. Cursor Off. Blink Off
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9c df       	rcall	.-200    	; 0xb8 <cmd>
	cmd(0b00000110); // Entry Mode. Cursor Increment
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	99 df       	rcall	.-206    	; 0xb8 <cmd>

	display1(name[0]);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	cc df       	rcall	.-104    	; 0x124 <display1>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x36>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
