
week13-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007af  00000000  00000000  00000a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	44 c0       	rjmp	.+136    	; 0xae <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	11 d0       	rcall	.+34     	; 0xcc <main>
  aa:	49 c0       	rjmp	.+146    	; 0x13e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_9>:
#include<avr/io.h>
#include<util/delay.h>
#include<avr/interrupt.h>

volatile unsigned int count = 0;
ISR(TIMER2_COMP_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	PORTA^=0x80;
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	80 58       	subi	r24, 0x80	; 128
  be:	8b bb       	out	0x1b, r24	; 27
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void){
	unsigned char key;
	DDRA = 0b10000000;
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0b00000000;
  d0:	12 b8       	out	0x02, r1	; 2
	PORTE = 0b11111111;
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	93 b9       	out	0x03, r25	; 3
	
	TCCR2 = 0b00001100; // CTC모드, 프리스케일러 분주비 64
  d6:	9c e0       	ldi	r25, 0x0C	; 12
  d8:	95 bd       	out	0x25, r25	; 37
	TIMSK = 0b10000000; // 타이머2의 비교일치 인터럽트 설정
  da:	87 bf       	out	0x37, r24	; 55
	OCR2 = 124; // 비교일치 값 지정
  dc:	9c e7       	ldi	r25, 0x7C	; 124
  de:	93 bd       	out	0x23, r25	; 35
	TCNT2 = 0; // 초기값
  e0:	14 bc       	out	0x24, r1	; 36
	SREG = 0x80;
  e2:	8f bf       	out	0x3f, r24	; 63
	
	while(1) {
		key = PINE;
  e4:	81 b1       	in	r24, 0x01	; 1
		switch (key) {
  e6:	8f 3e       	cpi	r24, 0xEF	; 239
  e8:	f1 f0       	breq	.+60     	; 0x126 <main+0x5a>
  ea:	38 f4       	brcc	.+14     	; 0xfa <main+0x2e>
  ec:	8f 3b       	cpi	r24, 0xBF	; 191
  ee:	09 f1       	breq	.+66     	; 0x132 <main+0x66>
  f0:	8f 3d       	cpi	r24, 0xDF	; 223
  f2:	e1 f0       	breq	.+56     	; 0x12c <main+0x60>
  f4:	8f 37       	cpi	r24, 0x7F	; 127
  f6:	b1 f7       	brne	.-20     	; 0xe4 <main+0x18>
  f8:	1f c0       	rjmp	.+62     	; 0x138 <main+0x6c>
  fa:	8b 3f       	cpi	r24, 0xFB	; 251
  fc:	71 f0       	breq	.+28     	; 0x11a <main+0x4e>
  fe:	18 f4       	brcc	.+6      	; 0x106 <main+0x3a>
 100:	87 3f       	cpi	r24, 0xF7	; 247
 102:	71 f0       	breq	.+28     	; 0x120 <main+0x54>
 104:	ef cf       	rjmp	.-34     	; 0xe4 <main+0x18>
 106:	8d 3f       	cpi	r24, 0xFD	; 253
 108:	29 f0       	breq	.+10     	; 0x114 <main+0x48>
 10a:	8e 3f       	cpi	r24, 0xFE	; 254
 10c:	59 f7       	brne	.-42     	; 0xe4 <main+0x18>
			case 0b11111110: // 도
			OCR2=118;// 16MHz/(2*N*f)-1
 10e:	86 e7       	ldi	r24, 0x76	; 118
 110:	83 bd       	out	0x23, r24	; 35
			break;
 112:	e8 cf       	rjmp	.-48     	; 0xe4 <main+0x18>
			case 0b11111101: // 레
			OCR2=106;
 114:	8a e6       	ldi	r24, 0x6A	; 106
 116:	83 bd       	out	0x23, r24	; 35
			break;
 118:	e5 cf       	rjmp	.-54     	; 0xe4 <main+0x18>
			case 0b11111011: // 미
			OCR2=94;
 11a:	8e e5       	ldi	r24, 0x5E	; 94
 11c:	83 bd       	out	0x23, r24	; 35
			break;
 11e:	e2 cf       	rjmp	.-60     	; 0xe4 <main+0x18>
			case 0b11110111: // 파
			OCR2=89;
 120:	89 e5       	ldi	r24, 0x59	; 89
 122:	83 bd       	out	0x23, r24	; 35
			break;
 124:	df cf       	rjmp	.-66     	; 0xe4 <main+0x18>
			case 0b11101111: // 솔
			OCR2=79;
 126:	8f e4       	ldi	r24, 0x4F	; 79
 128:	83 bd       	out	0x23, r24	; 35
			break;
 12a:	dc cf       	rjmp	.-72     	; 0xe4 <main+0x18>
			case 0b11011111: // 라
			OCR2=70;
 12c:	86 e4       	ldi	r24, 0x46	; 70
 12e:	83 bd       	out	0x23, r24	; 35
			break;
 130:	d9 cf       	rjmp	.-78     	; 0xe4 <main+0x18>
			case 0b10111111: // 시
			OCR2=62;
 132:	8e e3       	ldi	r24, 0x3E	; 62
 134:	83 bd       	out	0x23, r24	; 35
			break;
 136:	d6 cf       	rjmp	.-84     	; 0xe4 <main+0x18>
			case 0b01111111: // 도
			OCR2=59;
 138:	8b e3       	ldi	r24, 0x3B	; 59
 13a:	83 bd       	out	0x23, r24	; 35
			break;
 13c:	d3 cf       	rjmp	.-90     	; 0xe4 <main+0x18>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
