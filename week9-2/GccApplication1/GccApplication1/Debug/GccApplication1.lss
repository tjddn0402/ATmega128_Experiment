
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087c  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bd  00000000  00000000  00001299  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000420  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	41 d0       	rcall	.+130    	; 0x12c <main>
  aa:	49 c0       	rjmp	.+146    	; 0x13e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USART0_Init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void USART0_Init(){
	UCSR0A = 0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0b10011000; // RXCIE0=1, TXEN0=1, RXEN0=1
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0b10000110; // 비동기 통신, 패리티 없음. 데이터 비트 : 8비트, 정지비트 : 1비트
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0;
  ba:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 103; // fosc=14.7456MHz, BAUD=9600bps
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	89 b9       	out	0x09, r24	; 9
  c2:	08 95       	ret

000000c4 <TimerCounter2_Init>:
}

void TimerCounter2_Init(){
	TCCR2=0b01101101;//분주비 1024, 주파수 16000000/256/1024=61 (원래 목표는 50)
  c4:	8d e6       	ldi	r24, 0x6D	; 109
  c6:	85 bd       	out	0x25, r24	; 37
	TIMSK=0b11000000;
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	87 bf       	out	0x37, r24	; 55
	OCR2=25;//256*0.05-1
  cc:	89 e1       	ldi	r24, 0x19	; 25
  ce:	83 bd       	out	0x23, r24	; 35
	TCNT2=0X00;
  d0:	14 bc       	out	0x24, r1	; 36
  d2:	08 95       	ret

000000d4 <__vector_18>:
}

volatile char ch;
//volatile unsigned char degree=0;
ISR(USART0_RX_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	ch=UDR0;
  e0:	8c b1       	in	r24, 0x0c	; 12
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTA=ch-'0';
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	80 53       	subi	r24, 0x30	; 48
  ec:	8b bb       	out	0x1b, r24	; 27
	switch(ch){
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	83 33       	cpi	r24, 0x33	; 51
  f4:	79 f0       	breq	.+30     	; 0x114 <__vector_18+0x40>
  f6:	28 f4       	brcc	.+10     	; 0x102 <__vector_18+0x2e>
  f8:	81 33       	cpi	r24, 0x31	; 49
  fa:	41 f0       	breq	.+16     	; 0x10c <__vector_18+0x38>
  fc:	82 33       	cpi	r24, 0x32	; 50
  fe:	41 f0       	breq	.+16     	; 0x110 <__vector_18+0x3c>
 100:	0f c0       	rjmp	.+30     	; 0x120 <__vector_18+0x4c>
 102:	84 33       	cpi	r24, 0x34	; 52
 104:	49 f0       	breq	.+18     	; 0x118 <__vector_18+0x44>
 106:	85 33       	cpi	r24, 0x35	; 53
 108:	49 f0       	breq	.+18     	; 0x11c <__vector_18+0x48>
 10a:	0a c0       	rjmp	.+20     	; 0x120 <__vector_18+0x4c>
		case '1':
			OCR2=12;//0
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	83 bd       	out	0x23, r24	; 35
		case '2':
			OCR2=15;//45
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	83 bd       	out	0x23, r24	; 35
		case '3':
			OCR2=18;
 114:	82 e1       	ldi	r24, 0x12	; 18
 116:	83 bd       	out	0x23, r24	; 35
		case '4':
			OCR2=21;
 118:	85 e1       	ldi	r24, 0x15	; 21
 11a:	83 bd       	out	0x23, r24	; 35
		case '5':
			OCR2=25;
 11c:	89 e1       	ldi	r24, 0x19	; 25
 11e:	83 bd       	out	0x23, r24	; 35
	}
	else{
		degree=degree*10+ch-'0';
	}
	*/
}
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <main>:

int main(void)
{
	DDRA=0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 130:	87 bb       	out	0x17, r24	; 23
	TimerCounter2_Init();
 132:	c8 df       	rcall	.-112    	; 0xc4 <TimerCounter2_Init>
	USART0_Init();
 134:	bc df       	rcall	.-136    	; 0xae <USART0_Init>
 136:	8f b7       	in	r24, 0x3f	; 63
	SREG|=0x80;
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8f bf       	out	0x3f, r24	; 63
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x10>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
