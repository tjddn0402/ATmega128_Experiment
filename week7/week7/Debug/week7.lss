
week7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  000005ec  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800168  00800168  000006e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4f  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f0  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  000026ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fb  00000000  00000000  00002b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003296  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	ff c1       	rjmp	.+1022   	; 0x404 <__vector_1>
   6:	00 00       	nop
   8:	5f c0       	rjmp	.+190    	; 0xc8 <__vector_2>
   a:	00 00       	nop
   c:	8b c0       	rjmp	.+278    	; 0x124 <__vector_3>
   e:	00 00       	nop
  10:	b7 c0       	rjmp	.+366    	; 0x180 <__vector_4>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__vector_5>
  16:	00 00       	nop
  18:	f7 c0       	rjmp	.+494    	; 0x208 <__vector_6>
  1a:	00 00       	nop
  1c:	17 c1       	rjmp	.+558    	; 0x24c <__vector_7>
  1e:	00 00       	nop
  20:	37 c1       	rjmp	.+622    	; 0x290 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	2d c2       	rjmp	.+1114   	; 0x484 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	7e c1       	rjmp	.+764    	; 0x346 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 36       	cpi	r26, 0x68	; 104
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e6       	ldi	r26, 0x68	; 104
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 36       	cpi	r26, 0x6E	; 110
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5b d2       	rcall	.+1206   	; 0x57a <main>
  c4:	91 c2       	rjmp	.+1314   	; 0x5e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_2>:
}

//외부 인터럽트
volatile unsigned char binNum = 0x00;
ISR(INT0_vect){if (gameState & 0x01){binNum |= 0x01;LED |= 0x01;}else{gameState |= 0x01;LED=0x00;display(screen[5],2);}}//게임 시작
ISR(INT1_vect){if (gameState & 0x01){binNum |= 0x02;LED |= 0x02;}else{if(timeLimit<9)LED=++timeLimit;}}//게임 시간 조절하고 led로 게임시간 확인
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
  e0:	80 ff       	sbrs	r24, 0
  e2:	0b c0       	rjmp	.+22     	; 0xfa <__vector_2+0x32>
  e4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
  ee:	e2 e6       	ldi	r30, 0x62	; 98
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
  f8:	0b c0       	rjmp	.+22     	; 0x110 <__vector_2+0x48>
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	89 30       	cpi	r24, 0x09	; 9
 100:	38 f4       	brcc	.+14     	; 0x110 <__vector_2+0x48>
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0b be       	out	0x3b, r0	; 59
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_3>:
ISR(INT2_vect){if (gameState & 0x01){binNum |= 0x04;LED |= 0x04;}else{if(timeLimit>1)LED=--timeLimit;}}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 13c:	80 ff       	sbrs	r24, 0
 13e:	0b c0       	rjmp	.+22     	; 0x156 <__vector_3+0x32>
 140:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 144:	84 60       	ori	r24, 0x04	; 4
 146:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 14a:	e2 e6       	ldi	r30, 0x62	; 98
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	84 60       	ori	r24, 0x04	; 4
 152:	80 83       	st	Z, r24
 154:	0b c0       	rjmp	.+22     	; 0x16c <__vector_3+0x48>
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	38 f0       	brcs	.+14     	; 0x16c <__vector_3+0x48>
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	81 50       	subi	r24, 0x01	; 1
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0b be       	out	0x3b, r0	; 59
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_4>:
ISR(INT3_vect){if (gameState & 0x01){binNum |= 0x08;LED |= 0x08;}}
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	0b b6       	in	r0, 0x3b	; 59
 18c:	0f 92       	push	r0
 18e:	8f 93       	push	r24
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 198:	80 ff       	sbrs	r24, 0
 19a:	0a c0       	rjmp	.+20     	; 0x1b0 <__vector_4+0x30>
 19c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 1a6:	e2 e6       	ldi	r30, 0x62	; 98
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	80 83       	st	Z, r24
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0b be       	out	0x3b, r0	; 59
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_5>:
ISR(INT4_vect){if (gameState & 0x01){binNum |= 0x10;LED |= 0x10;}}
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0b b6       	in	r0, 0x3b	; 59
 1d0:	0f 92       	push	r0
 1d2:	8f 93       	push	r24
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
 1d8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 1dc:	80 ff       	sbrs	r24, 0
 1de:	0a c0       	rjmp	.+20     	; 0x1f4 <__vector_5+0x30>
 1e0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 1e4:	80 61       	ori	r24, 0x10	; 16
 1e6:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 1ea:	e2 e6       	ldi	r30, 0x62	; 98
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	80 83       	st	Z, r24
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	8f 91       	pop	r24
 1fa:	0f 90       	pop	r0
 1fc:	0b be       	out	0x3b, r0	; 59
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_6>:
ISR(INT5_vect){if (gameState & 0x01){binNum |= 0x20;LED |= 0x20;}}
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	0b b6       	in	r0, 0x3b	; 59
 214:	0f 92       	push	r0
 216:	8f 93       	push	r24
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
 21c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 220:	80 ff       	sbrs	r24, 0
 222:	0a c0       	rjmp	.+20     	; 0x238 <__vector_6+0x30>
 224:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 22e:	e2 e6       	ldi	r30, 0x62	; 98
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 62       	ori	r24, 0x20	; 32
 236:	80 83       	st	Z, r24
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_7>:
ISR(INT6_vect){if (gameState & 0x01){binNum |= 0x40;LED |= 0x40;}}
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	0b b6       	in	r0, 0x3b	; 59
 258:	0f 92       	push	r0
 25a:	8f 93       	push	r24
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
 260:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 264:	80 ff       	sbrs	r24, 0
 266:	0a c0       	rjmp	.+20     	; 0x27c <__vector_7+0x30>
 268:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 272:	e2 e6       	ldi	r30, 0x62	; 98
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	80 83       	st	Z, r24
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_8>:
ISR(INT7_vect){if (gameState & 0x01){binNum |= 0x80;LED |= 0x80;}}
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	0b b6       	in	r0, 0x3b	; 59
 29c:	0f 92       	push	r0
 29e:	8f 93       	push	r24
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 2a8:	80 ff       	sbrs	r24, 0
 2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <__vector_8+0x30>
 2ac:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 2b6:	e2 e6       	ldi	r30, 0x62	; 98
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	80 68       	ori	r24, 0x80	; 128
 2be:	80 83       	st	Z, r24
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0b be       	out	0x3b, r0	; 59
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <cmd>:
	}
}

void cmd(int command)
{
	INST = command;
 2d4:	88 bb       	out	0x18, r24	; 24
	CTRL = E;
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <cmd+0xa>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <cmd+0x10>
 2e4:	00 00       	nop
	_delay_ms(1);
	CTRL &= ~(E);
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	8b 7f       	andi	r24, 0xFB	; 251
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	08 95       	ret

000002ee <data>:
}

void data(char str)
{
	DATA = str;
 2ee:	88 bb       	out	0x18, r24	; 24
	CTRL = (E | RS);
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	8b bb       	out	0x1b, r24	; 27
 2f4:	8f e9       	ldi	r24, 0x9F	; 159
 2f6:	9f e0       	ldi	r25, 0x0F	; 15
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <data+0xa>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <data+0x10>
 2fe:	00 00       	nop
	_delay_ms(1);
	CTRL &= ~(E);
 300:	8b b3       	in	r24, 0x1b	; 27
 302:	8b 7f       	andi	r24, 0xFB	; 251
 304:	8b bb       	out	0x1b, r24	; 27
 306:	08 95       	ret

00000308 <display>:
}

void display(volatile char *str, unsigned char line)
{ // print selected line on LCD
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	8c 01       	movw	r16, r24
	if (line == 1){	cmd(0b10000000);} //select 1st line
 312:	61 30       	cpi	r22, 0x01	; 1
 314:	31 f4       	brne	.+12     	; 0x322 <display+0x1a>
 316:	80 e8       	ldi	r24, 0x80	; 128
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	dc df       	rcall	.-72     	; 0x2d4 <cmd>
	_delay_ms(1);
	CTRL &= ~(E);
}

void display(volatile char *str, unsigned char line)
{ // print selected line on LCD
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	07 c0       	rjmp	.+14     	; 0x330 <display+0x28>
	if (line == 1){	cmd(0b10000000);} //select 1st line
	else{cmd(0b11000000);} //select 2nd line
 322:	80 ec       	ldi	r24, 0xC0	; 192
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	d6 df       	rcall	.-84     	; 0x2d4 <cmd>
 328:	f9 cf       	rjmp	.-14     	; 0x31c <display+0x14>
	int i = 0;
	while (str[i] != '\0'){data(str[i++]);}
 32a:	21 96       	adiw	r28, 0x01	; 1
 32c:	80 81       	ld	r24, Z
 32e:	df df       	rcall	.-66     	; 0x2ee <data>
 330:	f8 01       	movw	r30, r16
 332:	ec 0f       	add	r30, r28
 334:	fd 1f       	adc	r31, r29
 336:	80 81       	ld	r24, Z
 338:	81 11       	cpse	r24, r1
 33a:	f7 cf       	rjmp	.-18     	; 0x32a <display+0x22>
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <__vector_18>:
//USART 인터럽트
volatile unsigned char gameState = 0x00;//0: 게임중 여부 //1: 사용자 pc 입력이 끝났는지 여부
volatile unsigned char ch; //PC유저가 입력한 문자를 받는 변수
volatile unsigned char inputNum=0;
volatile unsigned char numPos=0;
ISR(USART0_RX_vect){
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	0b b6       	in	r0, 0x3b	; 59
 352:	0f 92       	push	r0
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	if(gameState&0x01)
 36c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 370:	80 ff       	sbrs	r24, 0
 372:	35 c0       	rjmp	.+106    	; 0x3de <__vector_18+0x98>
	{
		if ((ch = UDR0) != 'q')
 374:	8c b1       	in	r24, 0x0c	; 12
 376:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <ch>
 37a:	81 37       	cpi	r24, 0x71	; 113
 37c:	21 f1       	breq	.+72     	; 0x3c6 <__vector_18+0x80>
		{
			screen[1][numPos]=ch;
 37e:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <numPos>
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <ch>
 388:	ef 5f       	subi	r30, 0xFF	; 255
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	81 8b       	std	Z+17, r24	; 0x11
			numPos++;
 38e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <numPos>
 392:	8f 5f       	subi	r24, 0xFF	; 255
 394:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <numPos>
			inputNum *= 10;
 398:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <inputNum>
 39c:	88 0f       	add	r24, r24
 39e:	98 2f       	mov	r25, r24
 3a0:	99 0f       	add	r25, r25
 3a2:	99 0f       	add	r25, r25
 3a4:	89 0f       	add	r24, r25
 3a6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <inputNum>
			inputNum += (ch - '0');
 3aa:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <ch>
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	c0 97       	sbiw	r24, 0x30	; 48
 3b2:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <inputNum>
 3b6:	89 0f       	add	r24, r25
 3b8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <inputNum>
			display(screen[1],2);
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	82 e1       	ldi	r24, 0x12	; 18
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	a2 df       	rcall	.-188    	; 0x308 <display>
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <__vector_18+0x98>
		}
		else{
			gameState |= 0x02;
 3c6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <gameState>
			display(screen[4],2);
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	85 e4       	ldi	r24, 0x45	; 69
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	98 df       	rcall	.-208    	; 0x308 <display>
			numPos=0;
 3d8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <numPos>
			TCNT2 = 0x00;//엔터키 받고부터 정확한 시간 재기
 3dc:	14 bc       	out	0x24, r1	; 36
		}
	}
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0b be       	out	0x3b, r0	; 59
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <__vector_1>:

//외부 인터럽트
volatile unsigned char binNum = 0x00;
ISR(INT0_vect){if (gameState & 0x01){binNum |= 0x01;LED |= 0x01;}else{gameState |= 0x01;LED=0x00;display(screen[5],2);}}//게임 시작
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	0b b6       	in	r0, 0x3b	; 59
 410:	0f 92       	push	r0
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	4f 93       	push	r20
 418:	5f 93       	push	r21
 41a:	6f 93       	push	r22
 41c:	7f 93       	push	r23
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
 42a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 42e:	80 ff       	sbrs	r24, 0
 430:	0b c0       	rjmp	.+22     	; 0x448 <__vector_1+0x44>
 432:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 436:	81 60       	ori	r24, 0x01	; 1
 438:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 43c:	e2 e6       	ldi	r30, 0x62	; 98
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	81 60       	ori	r24, 0x01	; 1
 444:	80 83       	st	Z, r24
 446:	0b c0       	rjmp	.+22     	; 0x45e <__vector_1+0x5a>
 448:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <gameState>
 452:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 456:	62 e0       	ldi	r22, 0x02	; 2
 458:	86 e5       	ldi	r24, 0x56	; 86
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	55 df       	rcall	.-342    	; 0x308 <display>
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0b be       	out	0x3b, r0	; 59
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <__vector_10>:
ISR(INT7_vect){if (gameState & 0x01){binNum |= 0x80;LED |= 0x80;}}

//타이머/카운터 인터럽트//if 문 내에서 항상 binNum과 입력 값을 비교한다.
volatile unsigned char count;
ISR(TIMER2_OVF_vect)
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	0b b6       	in	r0, 0x3b	; 59
 490:	0f 92       	push	r0
 492:	2f 93       	push	r18
 494:	3f 93       	push	r19
 496:	4f 93       	push	r20
 498:	5f 93       	push	r21
 49a:	6f 93       	push	r22
 49c:	7f 93       	push	r23
 49e:	8f 93       	push	r24
 4a0:	9f 93       	push	r25
 4a2:	af 93       	push	r26
 4a4:	bf 93       	push	r27
 4a6:	ef 93       	push	r30
 4a8:	ff 93       	push	r31
	if (gameState & 0x02) //터미널 입력이 끝나서 플레이어의 입력을 기다린다면
 4aa:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <gameState>
 4ae:	81 ff       	sbrs	r24, 1
 4b0:	51 c0       	rjmp	.+162    	; 0x554 <__vector_10+0xd0>
	{
		if (binNum != inputNum)//아직 플레이어의 입력이 출제가의 입력과 다르다면
 4b2:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <__data_end>
 4b6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <inputNum>
 4ba:	98 17       	cp	r25, r24
 4bc:	91 f1       	breq	.+100    	; 0x522 <__vector_10+0x9e>
		{
			count++;
 4be:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <count>
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <count>
			if (count == 60)
 4c8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <count>
 4cc:	8c 33       	cpi	r24, 0x3C	; 60
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_10+0x4e>
 4d0:	41 c0       	rjmp	.+130    	; 0x554 <__vector_10+0xd0>
			{
				if ((--screen[1][5]) >= '0')
 4d2:	e1 e0       	ldi	r30, 0x01	; 1
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
 4d6:	86 89       	ldd	r24, Z+22	; 0x16
 4d8:	81 50       	subi	r24, 0x01	; 1
 4da:	86 8b       	std	Z+22, r24	; 0x16
 4dc:	80 33       	cpi	r24, 0x30	; 48
 4de:	28 f0       	brcs	.+10     	; 0x4ea <__vector_10+0x66>
				{
					display(screen[1], 2);
 4e0:	62 e0       	ldi	r22, 0x02	; 2
 4e2:	82 e1       	ldi	r24, 0x12	; 18
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	10 df       	rcall	.-480    	; 0x308 <display>
 4e8:	19 c0       	rjmp	.+50     	; 0x51c <__vector_10+0x98>
				}
				else
				{//time over
					display(screen[3], 2);
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	84 e3       	ldi	r24, 0x34	; 52
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0b df       	rcall	.-490    	; 0x308 <display>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	89 e6       	ldi	r24, 0x69	; 105
 4f6:	98 e1       	ldi	r25, 0x18	; 24
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <__vector_10+0x74>
 500:	00 c0       	rjmp	.+0      	; 0x502 <__vector_10+0x7e>
 502:	00 00       	nop
					_delay_ms(500);
					LED=binNum=inputNum=gameState = 0x00; //게임의 끝을 알림
 504:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <gameState>
 508:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <inputNum>
 50c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
 510:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
					display(screen[4],2);
 514:	62 e0       	ldi	r22, 0x02	; 2
 516:	85 e4       	ldi	r24, 0x45	; 69
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	f6 de       	rcall	.-532    	; 0x308 <display>
				}
				count = 0;
 51c:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <count>
 520:	19 c0       	rjmp	.+50     	; 0x554 <__vector_10+0xd0>
			}
		}
		else
		{//correct
			display(screen[2], 2);
 522:	62 e0       	ldi	r22, 0x02	; 2
 524:	83 e2       	ldi	r24, 0x23	; 35
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	ef de       	rcall	.-546    	; 0x308 <display>
			LED=binNum=inputNum=gameState = 0x00; //게임의 끝을 알림
 52a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <gameState>
 52e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <inputNum>
 532:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
 536:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	80 e7       	ldi	r24, 0x70	; 112
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <__vector_10+0xbc>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__vector_10+0xc6>
			_delay_ms(50);
			display(screen[4],2);
 54a:	00 00       	nop
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	85 e4       	ldi	r24, 0x45	; 69
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	da de       	rcall	.-588    	; 0x308 <display>
		}
	}
}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0b be       	out	0x3b, r0	; 59
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <main>:

int main(void)
{
	DDRA = 0xff;
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0XFF;
 57e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0X00;
 580:	11 ba       	out	0x11, r1	; 17
	DDRE = 0X00;
 582:	12 b8       	out	0x02, r1	; 2
	DDRF = 0XFF;
 584:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTD=0X0F;
 588:	9f e0       	ldi	r25, 0x0F	; 15
 58a:	92 bb       	out	0x12, r25	; 18
	PORTE=0XF0;
 58c:	90 ef       	ldi	r25, 0xF0	; 240
 58e:	93 b9       	out	0x03, r25	; 3
	LED = 0X00;
 590:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//USART 관련 레지스터
	UCSR0A = 0x00;
 594:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0b10011000;
 596:	98 e9       	ldi	r25, 0x98	; 152
 598:	9a b9       	out	0x0a, r25	; 10
	UCSR0C = 0b10000110;
 59a:	96 e8       	ldi	r25, 0x86	; 134
 59c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0;
 5a0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 103;
 5a4:	97 e6       	ldi	r25, 0x67	; 103
 5a6:	99 b9       	out	0x09, r25	; 9
	//외부인터럽트 관련 레지스터
	EICRA = 0b10101010;
 5a8:	9a ea       	ldi	r25, 0xAA	; 170
 5aa:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0b10101010; //인터럽트 트리거 방식 설정(falling edge)
 5ae:	9a bf       	out	0x3a, r25	; 58
	EIMSK = 0b11111111; //인터럽트 허용 설정
 5b0:	89 bf       	out	0x39, r24	; 57
	//타이머/카운터2 관련 레지스터
	TCCR2 = 0b00000101; //프리스케일러 분주비 1024
 5b2:	85 e0       	ldi	r24, 0x05	; 5
 5b4:	85 bd       	out	0x25, r24	; 37
	TIMSK = 0b01000000; //오버플로우 인터럽트 허용
 5b6:	80 e4       	ldi	r24, 0x40	; 64
 5b8:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0x00;		//타이머카운터0 초기화
 5ba:	14 bc       	out	0x24, r1	; 36

	SREG = 0x80;
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	8f bf       	out	0x3f, r24	; 63

	//LCD 초기화
	cmd(0b00111000); // Function Set. Set 8bit 1Line 5x7 dots
 5c0:	88 e3       	ldi	r24, 0x38	; 56
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	87 de       	rcall	.-754    	; 0x2d4 <cmd>
	cmd(0b00000001); // Display clear.
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	84 de       	rcall	.-760    	; 0x2d4 <cmd>
	cmd(0b10000000); // Set DDRAM address or cursor position on display
 5cc:	80 e8       	ldi	r24, 0x80	; 128
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	81 de       	rcall	.-766    	; 0x2d4 <cmd>
	cmd(0b00001100); // Display on. Cursor Off. Blink Off
 5d2:	8c e0       	ldi	r24, 0x0C	; 12
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	7e de       	rcall	.-772    	; 0x2d4 <cmd>
	cmd(0b00000110); // Entry Mode. Cursor Increment
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	7b de       	rcall	.-778    	; 0x2d4 <cmd>
	display(screen[0], 1);
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	91 de       	rcall	.-734    	; 0x308 <display>
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <main+0x6c>

000005e8 <_exit>:
 5e8:	f8 94       	cli

000005ea <__stop_program>:
 5ea:	ff cf       	rjmp	.-2      	; 0x5ea <__stop_program>
