
week6-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000033c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800120  00800120  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7d  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  00001039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000483  00000000  00000000  0000192b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b1  00000000  00000000  0000239e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000274f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__vector_2>
   a:	00 00       	nop
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c1       	rjmp	.+652    	; 0x2b6 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	89 d0       	rcall	.+274    	; 0x1d6 <main>
  c4:	39 c1       	rjmp	.+626    	; 0x338 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
		display(str[1],2);
		count = 0;
	}
}

ISR(INT0_vect){//start
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	goStop=1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_2>:
ISR(INT1_vect){//stop
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
	goStop=0;
  f0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <cmd>:
    }
}

void cmd(int command)
{
	INST = command;
  fe:	88 bb       	out	0x18, r24	; 24
	CTRL = E;
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <cmd+0xa>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <cmd+0x10>
 10e:	00 00       	nop
	_delay_ms(1);
	CTRL &= ~(E);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	8b bb       	out	0x1b, r24	; 27
 116:	08 95       	ret

00000118 <data>:
}
void data(char str)
{
	DATA = str;
 118:	88 bb       	out	0x18, r24	; 24
	CTRL = (E|RS);
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	8f e9       	ldi	r24, 0x9F	; 159
 120:	9f e0       	ldi	r25, 0x0F	; 15
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <data+0xa>
 126:	00 c0       	rjmp	.+0      	; 0x128 <data+0x10>
 128:	00 00       	nop
	_delay_ms(1);
	CTRL &= ~(E);
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	8b bb       	out	0x1b, r24	; 27
 130:	08 95       	ret

00000132 <display>:
}

void display(volatile char *str,unsigned char line)
{	// print selected line on LCD
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	8c 01       	movw	r16, r24
	if(line==1){cmd(0b10000000);}	//select 1st line
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	31 f4       	brne	.+12     	; 0x14c <display+0x1a>
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	dc df       	rcall	.-72     	; 0xfe <cmd>
	_delay_ms(1);
	CTRL &= ~(E);
}

void display(volatile char *str,unsigned char line)
{	// print selected line on LCD
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	07 c0       	rjmp	.+14     	; 0x15a <display+0x28>
	if(line==1){cmd(0b10000000);}	//select 1st line
	else{cmd(0b11000000);}			//select 2nd line
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	d6 df       	rcall	.-84     	; 0xfe <cmd>
 152:	f9 cf       	rjmp	.-14     	; 0x146 <display+0x14>
	int i = 0;
	while (str[i] != '\0')
	{
		data(str[i++]);
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	df df       	rcall	.-66     	; 0x118 <data>
void display(volatile char *str,unsigned char line)
{	// print selected line on LCD
	if(line==1){cmd(0b10000000);}	//select 1st line
	else{cmd(0b11000000);}			//select 2nd line
	int i = 0;
	while (str[i] != '\0')
 15a:	f8 01       	movw	r30, r16
 15c:	ec 0f       	add	r30, r28
 15e:	fd 1f       	adc	r31, r29
 160:	80 81       	ld	r24, Z
 162:	81 11       	cpse	r24, r1
 164:	f7 cf       	rjmp	.-18     	; 0x154 <display+0x22>
	{
		data(str[i++]);
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <__vector_3>:
	goStop=1;
}
ISR(INT1_vect){//stop
	goStop=0;
}
ISR(INT2_vect){//initialize
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	str[1][0]=str[1][1]=str[1][3]=str[1][4]=str[1][6]=str[1][7]='0';
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	87 8b       	std	Z+23, r24	; 0x17
 19e:	86 8b       	std	Z+22, r24	; 0x16
 1a0:	84 8b       	std	Z+20, r24	; 0x14
 1a2:	83 8b       	std	Z+19, r24	; 0x13
 1a4:	81 8b       	std	Z+17, r24	; 0x11
 1a6:	80 8b       	std	Z+16, r24	; 0x10
	display(str[1],2);
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	c1 df       	rcall	.-126    	; 0x132 <display>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0b be       	out	0x3b, r0	; 59
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <main>:

int main(void)
{
    DDRA=0xff;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 1da:	87 bb       	out	0x17, r24	; 23
	DDRD=0x00;
 1dc:	11 ba       	out	0x11, r1	; 17
	
	SWITCH=0b00000111;//풀업저항 사용
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	82 bb       	out	0x12, r24	; 18
	EICRA=0b00101010;// falling edge trigger
 1e2:	9a e2       	ldi	r25, 0x2A	; 42
 1e4:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK=0b00000111;// 외부인터럽트 허용
 1e8:	89 bf       	out	0x39, r24	; 57
	
	TCCR2 = 0b00000101; //프리스케일러 분주비 1024
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	85 bd       	out	0x25, r24	; 37
	TIMSK = 0b01000000; //오버플로우 인터럽트 허용
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0x00;		//타이머카운터0 초기화
 1f2:	14 bc       	out	0x24, r1	; 36
	
	SREG = 0x80;		//전체 인터럽트 허가
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	8f bf       	out	0x3f, r24	; 63
	
	cmd(0b00110000); // Function Set. Set 8bit 1Line 5x7 dots
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	80 df       	rcall	.-256    	; 0xfe <cmd>
	cmd(0b00000001); // Display clear.
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	7d df       	rcall	.-262    	; 0xfe <cmd>
	cmd(0b10000000); // Set DDRAM address or cursor position on display
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	7a df       	rcall	.-268    	; 0xfe <cmd>
	cmd(0b00001100); // Display on. Cursor Off. Blink Off
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	77 df       	rcall	.-274    	; 0xfe <cmd>
	cmd(0b00000110); // Entry Mode. Cursor Increment
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	74 df       	rcall	.-280    	; 0xfe <cmd>
	display(str[0],1);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	8a df       	rcall	.-236    	; 0x132 <display>
	display(str[1],2);
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	86 df       	rcall	.-244    	; 0x132 <display>
 226:	ff cf       	rjmp	.-2      	; 0x226 <main+0x50>

00000228 <tick>:
 228:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__DATA_REGION_ORIGIN__+0x17>
		data(str[i++]);
	}
}

void tick(){
	if (str[1][7]=='9'){str[1][7]='0';
 22c:	89 33       	cpi	r24, 0x39	; 57
 22e:	e9 f5       	brne	.+122    	; 0x2aa <tick+0x82>
 230:	e0 e0       	ldi	r30, 0x00	; 0
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	87 8b       	std	Z+23, r24	; 0x17
		if(str[1][6]=='5'){str[1][6]='0';
 238:	86 89       	ldd	r24, Z+22	; 0x16
 23a:	85 33       	cpi	r24, 0x35	; 53
 23c:	81 f5       	brne	.+96     	; 0x29e <tick+0x76>
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	86 8b       	std	Z+22, r24	; 0x16
			if(str[1][4]=='9'){str[1][4]='0';
 242:	84 89       	ldd	r24, Z+20	; 0x14
 244:	89 33       	cpi	r24, 0x39	; 57
 246:	29 f5       	brne	.+74     	; 0x292 <tick+0x6a>
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	84 8b       	std	Z+20, r24	; 0x14
				if(str[1][3]=='5'){str[1][3]='0';
 24c:	83 89       	ldd	r24, Z+19	; 0x13
 24e:	85 33       	cpi	r24, 0x35	; 53
 250:	d1 f4       	brne	.+52     	; 0x286 <tick+0x5e>
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	83 8b       	std	Z+19, r24	; 0x13
					if(str[1][1]=='9'){	str[1][1]='0';
 256:	81 89       	ldd	r24, Z+17	; 0x11
 258:	89 33       	cpi	r24, 0x39	; 57
 25a:	79 f4       	brne	.+30     	; 0x27a <tick+0x52>
 25c:	80 e3       	ldi	r24, 0x30	; 48
 25e:	81 8b       	std	Z+17, r24	; 0x11
						if(str[1][0]=='9'){str[1][0]='0';}
 260:	80 89       	ldd	r24, Z+16	; 0x10
 262:	89 33       	cpi	r24, 0x39	; 57
 264:	21 f4       	brne	.+8      	; 0x26e <tick+0x46>
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__DATA_REGION_ORIGIN__+0x10>
 26c:	08 95       	ret
						else{str[1][0]++;}
 26e:	e0 e0       	ldi	r30, 0x00	; 0
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	80 89       	ldd	r24, Z+16	; 0x10
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 8b       	std	Z+16, r24	; 0x10
 278:	08 95       	ret
					}else{str[1][1]++;}
 27a:	e0 e0       	ldi	r30, 0x00	; 0
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	81 89       	ldd	r24, Z+17	; 0x11
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	81 8b       	std	Z+17, r24	; 0x11
 284:	08 95       	ret
				}else{str[1][3]++;}
 286:	e0 e0       	ldi	r30, 0x00	; 0
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	83 89       	ldd	r24, Z+19	; 0x13
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	83 8b       	std	Z+19, r24	; 0x13
 290:	08 95       	ret
			}else{str[1][4]++;}
 292:	e0 e0       	ldi	r30, 0x00	; 0
 294:	f1 e0       	ldi	r31, 0x01	; 1
 296:	84 89       	ldd	r24, Z+20	; 0x14
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	84 8b       	std	Z+20, r24	; 0x14
 29c:	08 95       	ret
		}else{str[1][6]++;}
 29e:	e0 e0       	ldi	r30, 0x00	; 0
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	86 89       	ldd	r24, Z+22	; 0x16
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	86 8b       	std	Z+22, r24	; 0x16
 2a8:	08 95       	ret
	}else{str[1][7]++;}
 2aa:	e0 e0       	ldi	r30, 0x00	; 0
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	87 89       	ldd	r24, Z+23	; 0x17
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	87 8b       	std	Z+23, r24	; 0x17
 2b4:	08 95       	ret

000002b6 <__vector_10>:
volatile char str[2][16]={{"Stop Watch"},{"00:00:00"}};
void tick();// manipulate str to increase time on LCD
volatile unsigned char goStop=0;//1:count time // 0:stop
	
ISR(TIMER2_OVF_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	0b b6       	in	r0, 0x3b	; 59
 2c2:	0f 92       	push	r0
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	count++;
 2dc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <count>
 2e0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <count+0x1>
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <count+0x1>
 2ea:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <count>
	if (count == 60){
 2ee:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <count>
 2f2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <count+0x1>
 2f6:	cc 97       	sbiw	r24, 0x3c	; 60
 2f8:	61 f4       	brne	.+24     	; 0x312 <__vector_10+0x5c>
		if(goStop){tick();}
 2fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 2fe:	81 11       	cpse	r24, r1
 300:	93 df       	rcall	.-218    	; 0x228 <tick>
		display(str[1],2);
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	14 df       	rcall	.-472    	; 0x132 <display>
		count = 0;
 30a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <count+0x1>
 30e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <count>
	}
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0b be       	out	0x3b, r0	; 59
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
